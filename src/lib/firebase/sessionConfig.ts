// Configuraci√≥n de persistencia de sesi√≥n
import { browser } from '$app/environment';

/**
 * Configuraci√≥n de persistencia de sesi√≥n
 */
export const SESSION_CONFIG = {
  // Tiempo de vida de la sesi√≥n (en milisegundos)
  SESSION_TIMEOUT: 24 * 60 * 60 * 1000, // 24 horas
  
  // Clave para localStorage
  SESSION_KEY: 'firebase_session_persist',
  
  // Auto-renovaci√≥n de token
  AUTO_RENEW_TOKEN: false, // Deshabilitado para evitar loops
};

/**
 * Verifica si la persistencia de sesi√≥n est√° habilitada
 */
export function isSessionPersistenceEnabled(): boolean {
  if (!browser) return false;
  
  try {
    const setting = localStorage.getItem(SESSION_CONFIG.SESSION_KEY);
    return setting !== 'false'; // Por defecto habilitada
  } catch (error) {
    console.warn('No se puede acceder a localStorage:', error);
    return true; // Por defecto habilitada si no se puede verificar
  }
}

/**
 * Habilita la persistencia de sesi√≥n
 */
export function enableSessionPersistence(): void {
  if (!browser) return;
  
  try {
    localStorage.setItem(SESSION_CONFIG.SESSION_KEY, 'true');
    console.log('‚úÖ Persistencia de sesi√≥n habilitada');
  } catch (error) {
    console.error('Error habilitando persistencia de sesi√≥n:', error);
  }
}

/**
 * Deshabilita la persistencia de sesi√≥n
 */
export function disableSessionPersistence(): void {
  if (!browser) return;
  
  try {
    localStorage.setItem(SESSION_CONFIG.SESSION_KEY, 'false');
    console.log('‚ö†Ô∏è Persistencia de sesi√≥n deshabilitada');
  } catch (error) {
    console.error('Error deshabilitando persistencia de sesi√≥n:', error);
  }
}

/**
 * Limpia todos los datos de sesi√≥n
 */
export function clearSessionData(): void {
  if (!browser) return;
  
  try {
    localStorage.removeItem(SESSION_CONFIG.SESSION_KEY);
    console.log('üßπ Datos de sesi√≥n limpiados');
  } catch (error) {
    console.error('Error limpiando datos de sesi√≥n:', error);
  }
}
