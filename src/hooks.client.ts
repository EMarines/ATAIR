/**
 * Client-side hooks para SvelteKit
 * Maneja la verificaci√≥n inicial de sesi√≥n y redirecciones de autenticaci√≥n
 */

import type { HandleClientError } from '@sveltejs/kit';
import { authService } from '$lib/services/authService';
import { initializeAuthManager } from '$lib/firebase/authManager';

// Inicializar el gestor de autenticaci√≥n cuando se carga la app
if (typeof window !== 'undefined') {
    console.log('üîÑ Inicializando hooks.client.ts');
    
    // Inicializar el gestor de autenticaci√≥n
    initializeAuthManager().then(() => {
        console.log('‚úÖ AuthManager inicializado desde hooks.client');
        
        // Verificar si hay una sesi√≥n persistente
        const isLoggedIn = localStorage.getItem('user-logged-in') === 'true';
        if (isLoggedIn) {
            console.log('üîç Sesi√≥n persistente detectada, verificando...');
            authService.verifyToken().then(isValid => {
                if (isValid) {
                    console.log('‚úÖ Sesi√≥n restaurada exitosamente');
                } else {
                    console.warn('‚ö†Ô∏è Sesi√≥n expirada, se requiere nuevo login');
                }
            });
        } else {
            console.log('‚ÑπÔ∏è No hay sesi√≥n persistente');
        }
    });
}

/**
 * Maneja errores del cliente
 */
export const handleError: HandleClientError = ({ error }) => {
    console.error('Error en cliente:', error);
    
    // Aqu√≠ puedes agregar l√≥gica para reportar errores a un servicio
    // como Sentry, LogRocket, etc.
    
    return {
        message: 'Ha ocurrido un error inesperado'
    };
};
